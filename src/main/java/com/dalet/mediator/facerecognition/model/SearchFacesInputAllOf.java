/*
 * Dalet Media Mediator API
 * # Scope Dalet Mediator API allows you to submit long running media jobs managed by Dalet services.  Long running media jobs include: - **Media processing** such as transcoding or automatic QC. - **Automatic metadata extraction** such as automatic speech transcription or face detection.  The Dalet Mediator API is a REST API with typed schema for the payload. # Architecture Job processing is performed on the cloud via dynamic combination of microservices. Dalet Mediator adopts the [EBU MCMA] architecture.  The key objectives of this architecture are to support: - Job management and monitoring - Long running transactions - Event based communication pattern - Service registration and discovery - Horizontal scalability in an elastic manner  The architecture is implemented using the serverless approach - relying on  independent microservices accessible through well documented REST endpoints and sharing a common object model. ## Roles The following services are involved in the processing of media jobs exposed through the Dalet Media Mediator API: - **Mediator**: this is the main entry point to the architecture; this API endpoint supports: 1. Checking authentication using an API key and a token mechanism 2. Verifying quota restrictions before accepting a submitted job 3. Keeping track of usage so that job processing can be tracked and billed 4. Keeping track of jobs metadata as a job repository - **Job Processor**: once a job request is accepted by the mediator, it is assigned to a Job Processor. The Job Processor dispatches the job to an appropriate Job Worker (depending on the job profile and other criteria such as load on the system and cost of operation).  It then keeps track of the progress of the job and its status until completion and possible failures and timeout.  It reports progress to the Mediator through notifications. - **Job Worker**: The Job Worker performs the actual work on the media object, for example, AI metadata extraction (AME) or essence transcoding.  It reports progress to the Job Processor through notifications. - **Service Registry**: The Service Registry keeps track of all active services in the architecture. It is queried by the Mediator and by Processors to discover candidate services to perform jobs.  It is updated whenever a new service is launched or stopped.  The Service Registry also stores the list of all job profiles supported by one of the Job Workers deployed in the architecture. The Dalet Mediator API abstracts away from the complexity of this orchestration and provides a simple endpoint to submit long running jobs and monitor the progress of their execution.  It serves as a facade for the additional technical services for authentication, usage monitoring and service registry.  [EBU MCMA]: /https://tech.ebu.ch/groups/mcma 'EBU MCMA' ## Job Lifecycle ![Job Lifecyle Diagram](./job_lifecycle.svg 'Job Lifecycle Diagram')  ## Authentication To use the Dalet Mediator API - you must obtain an APIKey from Dalet.  This key comes in the form of two parameters: * client ID * secret  Given these two parameters, a client program must first obtain an access token (GET /auth/access-token) and then associate this token to every subsequent calls.  When the token expires, the API will return a 401 error code.  In this case, the client must request a new token and resubmit the request. 
 *
 * The version of the OpenAPI document: 1.4.0
 * Contact: cortexsupport@dalet.com
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.dalet.mediator.facerecognition.model;

import java.util.Objects;
import java.util.Arrays;
import com.dalet.mediator.facerecognition.model.Locator;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * SearchFacesInputAllOf
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen", date = "2020-07-22T16:35:31.447+08:00[GMT+08:00]")
public class SearchFacesInputAllOf {
  public static final String SERIALIZED_NAME_INPUT_IMAGE = "inputImage";
  @SerializedName(SERIALIZED_NAME_INPUT_IMAGE)
  private Locator inputImage;

  public static final String SERIALIZED_NAME_CLUSTER_COLLECTION_ID = "clusterCollectionId";
  @SerializedName(SERIALIZED_NAME_CLUSTER_COLLECTION_ID)
  private String clusterCollectionId;

  public static final String SERIALIZED_NAME_SIMILARITY_THRESHOLD = "similarityThreshold";
  @SerializedName(SERIALIZED_NAME_SIMILARITY_THRESHOLD)
  private java.lang.Double similarityThreshold = 0.8d;


  public SearchFacesInputAllOf inputImage(Locator inputImage) {
    
    this.inputImage = inputImage;
    return this;
  }

   /**
   * Get inputImage
   * @return inputImage
  **/
  @ApiModelProperty(required = true, value = "")

  public Locator getInputImage() {
    return inputImage;
  }


  public void setInputImage(Locator inputImage) {
    this.inputImage = inputImage;
  }


  public SearchFacesInputAllOf clusterCollectionId(String clusterCollectionId) {
    
    this.clusterCollectionId = clusterCollectionId;
    return this;
  }

   /**
   * ID of a ClusterCollection produced by an ClusterFaces job
   * @return clusterCollectionId
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "ID of a ClusterCollection produced by an ClusterFaces job")

  public String getClusterCollectionId() {
    return clusterCollectionId;
  }


  public void setClusterCollectionId(String clusterCollectionId) {
    this.clusterCollectionId = clusterCollectionId;
  }


  public SearchFacesInputAllOf similarityThreshold(java.lang.Double similarityThreshold) {
    
    this.similarityThreshold = similarityThreshold;
    return this;
  }

   /**
   * Similarity threshold (from 0 to 1) over which face candidates are considered a result.
   * @return similarityThreshold
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "0.8", value = "Similarity threshold (from 0 to 1) over which face candidates are considered a result.")

  public java.lang.Double getSimilarityThreshold() {
    return similarityThreshold;
  }


  public void setSimilarityThreshold(java.lang.Double similarityThreshold) {
    this.similarityThreshold = similarityThreshold;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    SearchFacesInputAllOf searchFacesInputAllOf = (SearchFacesInputAllOf) o;
    return Objects.equals(this.inputImage, searchFacesInputAllOf.inputImage) &&
        Objects.equals(this.clusterCollectionId, searchFacesInputAllOf.clusterCollectionId) &&
        Objects.equals(this.similarityThreshold, searchFacesInputAllOf.similarityThreshold);
  }

  @Override
  public int hashCode() {
    return Objects.hash(inputImage, clusterCollectionId, similarityThreshold);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class SearchFacesInputAllOf {\n");
    sb.append("    inputImage: ").append(toIndentedString(inputImage)).append("\n");
    sb.append("    clusterCollectionId: ").append(toIndentedString(clusterCollectionId)).append("\n");
    sb.append("    similarityThreshold: ").append(toIndentedString(similarityThreshold)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

